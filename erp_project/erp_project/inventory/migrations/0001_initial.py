# Generated by Django 5.2.4 on 2025-07-26 17:21

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('customer_code', models.CharField(help_text='Unique identifier for the customer or recipient entity', max_length=20, primary_key=True, serialize=False)),
                ('customer_name', models.CharField(help_text='Full legal name of the institution or company', max_length=200)),
                ('address_line1', models.CharField(help_text='Primary address (building, street)', max_length=200)),
                ('address_line2', models.CharField(blank=True, help_text='Additional address details', max_length=200)),
                ('city', models.CharField(help_text='City of recipient', max_length=100)),
                ('state', models.CharField(help_text='State or province', max_length=100)),
                ('postal_code', models.CharField(help_text='Postal/ZIP code', max_length=20)),
                ('country', models.CharField(help_text='Country of customer', max_length=3)),
                ('contact_person', models.CharField(help_text='Default contact for this recipient', max_length=100)),
                ('phone', models.CharField(help_text='Phone number for contact', max_length=20)),
                ('email', models.EmailField(blank=True, help_text='Contact email address', max_length=254)),
                ('customer_type', models.CharField(choices=[('Research', 'Research'), ('Clinical', 'Clinical'), ('Commercial', 'Commercial'), ('CM', 'Contract Manufacturer'), ('Internal', 'Internal')], help_text='Type of customer', max_length=20)),
                ('gstin', models.CharField(blank=True, help_text='GST identification number (India-specific)', max_length=20)),
                ('preferred_courier', models.CharField(blank=True, help_text='Default courier preference', max_length=100)),
                ('qa_required_before_ship', models.BooleanField(default=True, help_text='Whether QA approval must be completed before shipping')),
                ('approved', models.BooleanField(default=False, help_text='Flag to enable/disable dispatch to this customer')),
                ('approved_on', models.DateField(blank=True, help_text='Date customer was approved', null=True)),
                ('remarks', models.TextField(blank=True, help_text='Optional notes')),
            ],
            options={
                'db_table': 'customer_master',
            },
        ),
        migrations.CreateModel(
            name='ItemRecord',
            fields=[
                ('item_record_id', models.CharField(help_text='Unique internal ID formatted as [CAT]-[SUB]-[CODE]', max_length=50, primary_key=True, serialize=False)),
                ('item_name', models.CharField(help_text='Standardized name aligned with label and QA docs', max_length=200)),
                ('unit_of_measure', models.CharField(choices=[('kg', 'kg'), ('g', 'g'), ('L', 'L'), ('ml', 'ml'), ('bottle', 'bottle'), ('pcs', 'pcs'), ('box', 'box')], help_text='Standard unit of measurement', max_length=10)),
                ('category', models.CharField(choices=[('Biological', 'Biological'), ('Chemical', 'Chemical'), ('Packaging', 'Packaging'), ('Plasticwares', 'Plasticwares'), ('Electrical', 'Electrical'), ('Equipment', 'Equipment'), ('Consumables', 'Consumables'), ('Stationery', 'Stationery')], help_text='Inventory grouping', max_length=20)),
                ('subtype', models.CharField(help_text='Functional role within the category', max_length=50)),
                ('grade', models.CharField(blank=True, choices=[('ACS', 'ACS'), ('USP', 'USP'), ('FCC', 'FCC'), ('Lab', 'Lab'), ('Tech', 'Tech'), ('Custom', 'Custom')], help_text='Purity or spec level', max_length=10)),
                ('hazard_class', models.CharField(blank=True, choices=[('Flammable', 'Flammable'), ('Oxidizer', 'Oxidizer'), ('Corrosive', 'Corrosive'), ('Toxic', 'Toxic'), ('Reactive', 'Reactive'), ('None', 'None')], help_text='Regulatory hazard from SDS', max_length=20)),
                ('chemical_family', models.CharField(blank=True, help_text='Subgroup within hazard category', max_length=100)),
                ('contamination_risk', models.CharField(choices=[('Low', 'Low'), ('Medium', 'Medium'), ('High', 'High')], default='Low', help_text='Risk level for QA and traceability', max_length=10)),
                ('critical_to_product', models.BooleanField(default=False, help_text='Flag for QA and traceability enforcement')),
                ('qa_required', models.BooleanField(default=False, help_text='System-derived from grade, subtype, contamination, criticality')),
                ('traceability_level', models.CharField(choices=[('None', 'None'), ('Basic', 'Basic'), ('Batch-level', 'Batch-level'), ('Full', 'Full')], default='None', help_text='Derived traceability scope', max_length=20)),
                ('sds_mandatory', models.BooleanField(default=False, help_text='Safety Data Sheet required?')),
                ('coa_mandatory', models.BooleanField(default=False, help_text='Certificate of Analysis required?')),
                ('spec_required', models.BooleanField(default=False, help_text='Specification document required?')),
            ],
            options={
                'db_table': 'item_records',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('product_id', models.CharField(help_text='Unique product identifier', max_length=50, primary_key=True, serialize=False)),
                ('product_name', models.CharField(help_text='Display name for the product', max_length=200)),
                ('product_source', models.CharField(default='Internal', help_text='Clearly declares origin', max_length=20)),
                ('category', models.CharField(choices=[('Biological', 'Biological'), ('Chemical', 'Chemical'), ('Packaging', 'Packaging'), ('Plasticwares', 'Plasticwares'), ('Electrical', 'Electrical'), ('Equipment', 'Equipment'), ('Consumables', 'Consumables'), ('Stationery', 'Stationery')], help_text='Product group (aligns with Item Category)', max_length=20)),
                ('subtype', models.CharField(help_text='Functional role of product', max_length=50)),
                ('spec_version_linked', models.CharField(blank=True, help_text='Version of specification approved for this product', max_length=50)),
                ('product_label_name', models.CharField(blank=True, help_text='Name used for label printing', max_length=200)),
                ('default_unit_of_sale', models.CharField(help_text='Standard unit for packaging and sale', max_length=100)),
                ('shelf_life_months', models.IntegerField(help_text='Maximum usable duration for product batches')),
                ('qa_required', models.BooleanField(default=True, help_text='Whether QA sign-off is needed for release')),
                ('traceability_required', models.CharField(choices=[('None', 'None'), ('Basic', 'Basic'), ('Batch-level', 'Batch-level'), ('Full', 'Full')], default='Batch-level', help_text='Minimum level of traceability', max_length=20)),
            ],
            options={
                'db_table': 'product_master',
            },
        ),
        migrations.CreateModel(
            name='StorageZone',
            fields=[
                ('zone_id', models.CharField(help_text='Unique code for warehouse zone', max_length=20, primary_key=True, serialize=False)),
                ('zone_name', models.CharField(help_text='Human-readable name', max_length=100)),
                ('temperature_range', models.CharField(blank=True, help_text='Temperature range supported', max_length=50)),
                ('humidity_controlled', models.BooleanField(default=False, help_text='Whether humidity is regulated')),
                ('hazard_compatibility', models.CharField(blank=True, help_text='Types of hazards permitted in zone', max_length=500)),
                ('default_for_category', models.CharField(blank=True, choices=[('Biological', 'Biological'), ('Chemical', 'Chemical'), ('Packaging', 'Packaging'), ('Plasticwares', 'Plasticwares'), ('Electrical', 'Electrical'), ('Equipment', 'Equipment'), ('Consumables', 'Consumables'), ('Stationery', 'Stationery')], help_text='If this zone is the default for a category', max_length=20)),
            ],
            options={
                'db_table': 'storage_zone',
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('supplier_id', models.CharField(help_text='Unique identifier for the supplier', max_length=20, primary_key=True, serialize=False)),
                ('supplier_name', models.CharField(help_text='Full legal name of the supplier', max_length=200)),
                ('business_unit', models.CharField(blank=True, help_text='If internal supplier, name of internal entity', max_length=100)),
                ('address', models.TextField(help_text='Address and contact details')),
                ('country_of_origin', models.CharField(help_text='Country where goods are produced', max_length=3)),
                ('certifications', models.CharField(blank=True, help_text='Enum list of active certifications', max_length=500)),
                ('approved', models.BooleanField(default=False, help_text='QA Approval status')),
                ('approved_on', models.DateField(blank=True, help_text='Date of approval', null=True)),
                ('last_reviewed_on', models.DateField(blank=True, help_text='Date QA last reviewed this supplier', null=True)),
                ('review_frequency', models.CharField(choices=[('6 months', '6 months'), ('1 year', '1 year'), ('On change', 'On change')], default='1 year', max_length=20)),
                ('notes', models.TextField(blank=True, help_text='Optional comments on performance or conditions')),
            ],
            options={
                'db_table': 'supplier_master',
            },
        ),
        migrations.CreateModel(
            name='Batch',
            fields=[
                ('batch_id', models.CharField(help_text='Unique ID for each received or created batch', max_length=100, primary_key=True, serialize=False)),
                ('subtype', models.CharField(help_text='Subtype classification for the batch', max_length=50)),
                ('quantity_received', models.DecimalField(decimal_places=2, help_text='Amount of material received', max_digits=10)),
                ('received_date', models.DateField(help_text='When the batch was received')),
                ('expiry_date', models.DateField(help_text='Batch expiration date')),
                ('qa_status', models.CharField(choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Quarantined', 'Quarantined'), ('Rejected', 'Rejected')], default='Pending', help_text='Current QA status', max_length=20)),
                ('storage_location', models.CharField(blank=True, help_text='Where the batch is currently stored', max_length=50)),
                ('item_record_id', models.ForeignKey(help_text='Link to item definition', on_delete=django.db.models.deletion.CASCADE, to='inventory.itemrecord')),
            ],
            options={
                'db_table': 'batch_master',
            },
        ),
        migrations.CreateModel(
            name='ProductVersion',
            fields=[
                ('product_version_id', models.CharField(help_text='Unique identifier for version of product', max_length=50, primary_key=True, serialize=False)),
                ('sku', models.CharField(blank=True, help_text='SKU for finished biological products', max_length=50)),
                ('subtype', models.CharField(help_text='Functional role within product category', max_length=50)),
                ('spec_version', models.CharField(blank=True, help_text='Specific version of specification applied', max_length=50)),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('Active', 'Active'), ('Obsolete', 'Obsolete')], default='Draft', max_length=20)),
                ('effective_start_date', models.DateField(help_text='Start date of version applicability')),
                ('effective_end_date', models.DateField(blank=True, help_text='End date of version applicability', null=True)),
                ('notes', models.TextField(blank=True, help_text='Optional revision history or comments')),
                ('product_id', models.ForeignKey(help_text='Foreign key reference to Product Table', on_delete=django.db.models.deletion.CASCADE, to='inventory.product')),
            ],
            options={
                'db_table': 'product_version',
            },
        ),
        migrations.CreateModel(
            name='QAReview',
            fields=[
                ('qa_review_id', models.CharField(help_text='Unique ID for this QA review record', max_length=20, primary_key=True, serialize=False)),
                ('sub_ingredient_log', models.CharField(blank=True, help_text='Reference ID or path to the QA Sub-Ingredient Log', max_length=100)),
                ('coa_match', models.BooleanField(help_text='COA matches product and batch spec')),
                ('sds_match', models.BooleanField(help_text='SDS provided and valid for batch')),
                ('spec_match', models.BooleanField(help_text='Matches defined internal specification')),
                ('coa_attached', models.BooleanField(help_text='Digital COA file is stored')),
                ('sds_attached', models.BooleanField(help_text='Digital SDS is stored')),
                ('label_attached', models.BooleanField(help_text='Digital label image is available')),
                ('spec_attached', models.BooleanField(help_text='Product spec sheet attached')),
                ('document_match', models.CharField(choices=[('Yes', 'Yes'), ('Partial', 'Partial'), ('No', 'No')], help_text='All documents carry same batch code', max_length=10)),
                ('review_outcome', models.CharField(choices=[('Approved', 'Approved'), ('Conditional', 'Conditional'), ('Rejected', 'Rejected'), ('Escalated', 'Escalated')], help_text='Final QA result', max_length=20)),
                ('qa_reviewer', models.CharField(help_text='QA personnel performing review', max_length=50)),
                ('review_date', models.DateField(help_text='Date of QA review')),
                ('qa_file_link', models.CharField(blank=True, help_text='Folder or path to QA documents', max_length=500)),
                ('inventory_txn_id', models.CharField(blank=True, help_text='Linked transaction in inventory log', max_length=20)),
                ('comments', models.TextField(blank=True, help_text='Free text comments or notes')),
                ('batch_number', models.ForeignKey(help_text='Batch under review', on_delete=django.db.models.deletion.CASCADE, to='inventory.batch')),
                ('item_code', models.ForeignKey(help_text='Product or chemical being reviewed', on_delete=django.db.models.deletion.CASCADE, to='inventory.itemrecord')),
                ('supplier_code', models.ForeignKey(help_text='Source supplier', on_delete=django.db.models.deletion.CASCADE, to='inventory.supplier')),
            ],
            options={
                'db_table': 'qa_review',
            },
        ),
        migrations.CreateModel(
            name='QAReviewUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inventory_txn_id', models.CharField(blank=True, help_text='Link to inventory transaction', max_length=20)),
                ('unit_id', models.CharField(help_text='Identifier for the unit', max_length=20)),
                ('sub_ingredient_log', models.CharField(blank=True, help_text='Reference ID or path to the QA Sub-Ingredient Log', max_length=100)),
                ('visual_check', models.CharField(choices=[('Passed', 'Passed'), ('Failed', 'Failed')], help_text='Labeling, damage, visual QA', max_length=10)),
                ('spec_check', models.CharField(blank=True, choices=[('Passed', 'Passed'), ('Failed', 'Failed')], help_text='Unit-level QC spec confirmation', max_length=10)),
                ('disposition', models.CharField(choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Quarantined', 'Quarantined'), ('Rejected', 'Rejected')], help_text='Approved, Quarantined, or Rejected', max_length=20)),
                ('reviewer', models.CharField(help_text='QA reviewer ID', max_length=50)),
                ('reviewed_on', models.DateField(help_text='Date of check')),
                ('notes', models.TextField(blank=True, help_text='Comments or observations')),
                ('batch_number', models.ForeignKey(help_text='Batch to which this unit belongs', on_delete=django.db.models.deletion.CASCADE, to='inventory.batch')),
                ('qa_review_id', models.ForeignKey(help_text='Link to corresponding batch-level QA record', on_delete=django.db.models.deletion.CASCADE, to='inventory.qareview')),
            ],
            options={
                'db_table': 'qa_review_unit',
            },
        ),
        migrations.CreateModel(
            name='StorageLocation',
            fields=[
                ('location_id', models.CharField(help_text='Unique code for individual storage point', max_length=20, primary_key=True, serialize=False)),
                ('rack_shelf', models.CharField(blank=True, help_text='Physical sub-location information', max_length=100)),
                ('max_capacity', models.CharField(blank=True, help_text='Capacity in volume or units', max_length=100)),
                ('active', models.BooleanField(default=True, help_text='Whether this location is active for use')),
                ('zone_id', models.ForeignKey(help_text='FK to Storage Zone Table', on_delete=django.db.models.deletion.CASCADE, to='inventory.storagezone')),
            ],
            options={
                'db_table': 'storage_location',
            },
        ),
        migrations.CreateModel(
            name='InventoryTransaction',
            fields=[
                ('transaction_id', models.CharField(help_text='Unique identifier for each inventory transaction', max_length=20, primary_key=True, serialize=False)),
                ('transaction_datetime', models.DateTimeField(help_text='Timestamp when the transaction occurred')),
                ('transaction_user', models.CharField(help_text='User performing the transaction', max_length=50)),
                ('transaction_type', models.CharField(choices=[('RCV-PUR', 'Purchase Receipt'), ('RCV-INT', 'Internal Production Receipt'), ('RCV-PACK', 'Packaging Material Receipt'), ('RCV-ENG', 'Receive Engineering/Asset'), ('RCV-MIS', 'Receive Miscellaneous Non-Tracked'), ('ISS-MISC', 'Issue Miscellaneous'), ('ADJ-CYCLE', 'Cycle Count Adjustment'), ('RCV-FG', 'Receive Finished Goods from CM'), ('ISS-MFG', 'Issue to Manufacturing'), ('ISS-QC', 'Issue to QC'), ('ISS-RND', 'Issue to R&D'), ('XFER', 'Internal Transfer'), ('RET-VND', 'Return to Vendor'), ('RET-INT', 'Internal Return'), ('ADJ-GAIN', 'Adjustment - Gain'), ('ADJ-LOSS', 'Adjustment - Loss'), ('SCRAP', 'Scrap/Disposal'), ('SHIP-CUS', 'Customer Shipment'), ('SHIP-CM', 'Shipment to Contract Manufacturer'), ('BLOCK', 'QA Hold/Blocked'), ('RELEASE', 'Released from Hold'), ('SAMPLE-IN', 'Sample Received'), ('SAMPLE-OUT', 'Sample Issued')], help_text='Type of transaction movement', max_length=20)),
                ('comments', models.TextField(blank=True, help_text='Remarks or notes on the transaction')),
                ('supplier_name', models.CharField(blank=True, help_text='Name of supplier', max_length=200)),
                ('recipient_company', models.CharField(blank=True, help_text='Full name of recipient', max_length=200)),
                ('invoice_no', models.CharField(blank=True, help_text='Vendor invoice number', max_length=50)),
                ('invoice_date', models.DateField(blank=True, help_text='Date of invoice', null=True)),
                ('product_code', models.CharField(help_text='Product or catalog code from supplier', max_length=100)),
                ('product_name', models.CharField(help_text='Name of the product', max_length=200)),
                ('unit_id', models.CharField(blank=True, help_text='Unit-level unique ID', max_length=20)),
                ('mfg_date', models.DateField(blank=True, help_text='Date of manufacture', null=True)),
                ('expiry_date', models.DateField(blank=True, help_text='Expiry or retest date', null=True)),
                ('opened_date', models.DateField(blank=True, help_text='When item/container was first opened', null=True)),
                ('quantity', models.DecimalField(decimal_places=2, help_text='Quantity moved', max_digits=10)),
                ('unit', models.CharField(choices=[('kg', 'kg'), ('g', 'g'), ('L', 'L'), ('ml', 'ml'), ('bottle', 'bottle'), ('pcs', 'pcs'), ('box', 'box')], help_text='Unit of measure', max_length=10)),
                ('coa_provided', models.BooleanField(default=False, help_text='COA document was provided')),
                ('sds_provided', models.BooleanField(default=False, help_text='SDS document was provided')),
                ('label_applied', models.BooleanField(default=False, help_text='Internal label was applied')),
                ('qa_status', models.CharField(blank=True, choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Quarantined', 'Quarantined'), ('Rejected', 'Rejected')], help_text='Quality disposition status', max_length=20)),
                ('qa_file_link', models.CharField(blank=True, help_text='Path to QA review files', max_length=500)),
                ('sub_ingredient_log_id', models.CharField(blank=True, help_text='Reference to sub-ingredient QA log', max_length=100)),
                ('coa_match', models.BooleanField(default=False, help_text='Whether COA matched expected')),
                ('sds_match', models.BooleanField(default=False, help_text='Whether SDS matched expected')),
                ('spec_match', models.BooleanField(default=False, help_text='Whether item met specification')),
                ('used_in', models.CharField(blank=True, help_text='Linked production batch or experiment', max_length=100)),
                ('used_by', models.CharField(blank=True, help_text='Person who used the item', max_length=50)),
                ('used_date', models.DateField(blank=True, help_text='Date item was used', null=True)),
                ('finished_date', models.DateField(blank=True, help_text='Date item was finished', null=True)),
                ('return_status', models.CharField(blank=True, help_text='Flag for return tracking', max_length=20)),
                ('adjustment_reason', models.CharField(blank=True, help_text='Reason for manual adjustment', max_length=200)),
                ('serial_number', models.CharField(blank=True, help_text='Equipment serial number', max_length=50)),
                ('maintenance_due_date', models.DateField(blank=True, help_text='Next preventive maintenance', null=True)),
                ('calibration_date', models.DateField(blank=True, help_text='Date of last calibration', null=True)),
                ('condition', models.CharField(blank=True, choices=[('Good', 'Good'), ('Needs Repair', 'Needs Repair')], help_text='Condition of item or asset', max_length=20)),
                ('physical_location', models.CharField(blank=True, help_text='Actual location of item', max_length=200)),
                ('recipient_contact', models.CharField(blank=True, help_text="Recipient's contact person", max_length=100)),
                ('dispatch_method', models.CharField(blank=True, help_text='Mode of dispatch', max_length=50)),
                ('dispatch_address', models.CharField(blank=True, help_text='Where item was shipped to', max_length=500)),
                ('courier_name', models.CharField(blank=True, help_text='Courier service used', max_length=100)),
                ('tracking_number', models.CharField(blank=True, help_text='Tracking ID from courier', max_length=50)),
                ('disposed_date', models.DateField(blank=True, help_text='Date of disposal', null=True)),
                ('disposed_by', models.CharField(blank=True, help_text='User who discarded the item', max_length=50)),
                ('disposed_as', models.CharField(blank=True, help_text='Disposal method used', max_length=50)),
                ('disposal_comments', models.TextField(blank=True, help_text='Notes on disposal reason')),
                ('batch_id', models.ForeignKey(blank=True, help_text='Batch or lot ID', null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.batch')),
                ('recipient_code', models.ForeignKey(blank=True, help_text='Code of customer or recipient', null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.customer')),
                ('item_code', models.ForeignKey(help_text='Internal product code', on_delete=django.db.models.deletion.CASCADE, to='inventory.itemrecord')),
                ('qa_review_id', models.ForeignKey(blank=True, help_text='Linked QA Review record ID', null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.qareview')),
                ('storage_location', models.ForeignKey(blank=True, help_text='Specific shelf/bin location', null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.storagelocation')),
                ('storage_zone', models.ForeignKey(blank=True, help_text='Main storage zone', null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.storagezone')),
                ('supplier_code', models.ForeignKey(blank=True, help_text='Identifier for supplier', null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.supplier')),
            ],
            options={
                'db_table': 'inventory_transaction',
                'ordering': ['-transaction_datetime'],
            },
        ),
        migrations.CreateModel(
            name='SupplierProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manufacturer_name', models.CharField(blank=True, help_text='Actual manufacturer', max_length=200)),
                ('grade', models.CharField(blank=True, choices=[('ACS', 'ACS'), ('USP', 'USP'), ('FCC', 'FCC'), ('Lab', 'Lab'), ('Tech', 'Tech'), ('Custom', 'Custom')], help_text='Should align with Item Record grade', max_length=10)),
                ('product_code', models.CharField(blank=True, help_text='Catalog or internal manufacturer code', max_length=100)),
                ('packaging_description', models.CharField(blank=True, help_text='Commercial packaging unit', max_length=200)),
                ('catalog_url', models.URLField(blank=True, help_text='Supplier page for cross-verification')),
                ('batch_code_format_known', models.BooleanField(default=False, help_text='Whether batch code structure is known and documented')),
                ('batch_code_quality', models.CharField(choices=[('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')], default='Medium', max_length=10)),
                ('traceability_level', models.CharField(choices=[('None', 'None'), ('Basic', 'Basic'), ('Batch-level', 'Batch-level'), ('Full', 'Full')], default='None', max_length=20)),
                ('coa_mandatory', models.BooleanField(default=False, help_text='Certificate of Analysis must be provided')),
                ('sds_mandatory', models.BooleanField(default=False, help_text='Safety Data Sheet required')),
                ('spec_sheet_file_url', models.URLField(blank=True, help_text='Upload or link to product spec')),
                ('is_default', models.BooleanField(default=False, help_text='Preferred vendor-product pair')),
                ('approved', models.BooleanField(default=False, help_text='Has QA formally approved this supplier for the item?')),
                ('last_reviewed_on', models.DateField(blank=True, help_text='Date of last QA validation', null=True)),
                ('next_review_due', models.DateField(blank=True, help_text='When next QA check is expected', null=True)),
                ('review_frequency', models.CharField(choices=[('6 months', '6 months'), ('1 year', '1 year'), ('On change', 'On change')], default='6 months', max_length=20)),
                ('item_code', models.ForeignKey(help_text='FK to Item Master', on_delete=django.db.models.deletion.CASCADE, to='inventory.itemrecord')),
                ('supplier_name', models.ForeignKey(help_text='Vendor supplying the product', on_delete=django.db.models.deletion.CASCADE, to='inventory.supplier')),
            ],
            options={
                'db_table': 'supplier_product',
                'unique_together': {('item_code', 'supplier_name')},
            },
        ),
        migrations.AddField(
            model_name='batch',
            name='supplier_product_id',
            field=models.ForeignKey(blank=True, help_text='ID of the supplier product (if procured externally)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.supplierproduct'),
        ),
    ]
